# Importando mÃ³dulos do pipeline (organizaÃ§Ã£o do projeto)
from pipeline import preprocessing
from pipeline import visualization
from pipeline import modeling
from pipeline import evaluation

def main():
    # 1. Carregar e limpar dados
    print("ğŸ”¹ Carregando os dados...")
    df = preprocessing.load_data('data/diabetes.csv')
    print("Primeiras linhas do dataset:")
    print(df.head())
    print("\nInformaÃ§Ãµes gerais do dataset:")
    print(df.info())

    print("\nğŸ”¹ Limpando dados invÃ¡lidos (valores zero em colunas clÃ­nicas)...")
    df = preprocessing.clean_data_remove_invalid(df)
    print("Dados apÃ³s limpeza:")
    print(df.describe())

    # 2. VisualizaÃ§Ã£o dos dados
    print("\nğŸ”¹ Visualizando a distribuiÃ§Ã£o do diagnÃ³stico (target)...")
    visualization.plot_target_distribution(df)
    print("\nğŸ”¹ Visualizando histogramas das variÃ¡veis...")
    visualization.plot_histograms(df)
    print("\nğŸ”¹ Visualizando a matriz de correlaÃ§Ã£o...")
    visualization.plot_correlation_matrix(df)

    # 3. PrÃ©-processamento: separaÃ§Ã£o e padronizaÃ§Ã£o dos dados
    print("\nğŸ”¹ Separando dados em treino e teste, e aplicando padronizaÃ§Ã£o...")
    X_train, X_test, y_train, y_test = preprocessing.split_and_scale(df)

    # 4. Modelagem: definiÃ§Ã£o e treinamento dos modelos
    print("\nğŸ”¹ Definindo e treinando modelos de classificaÃ§Ã£o...")
    models = modeling.get_models()
    models = modeling.train_models(models, X_train, y_train)

    # 5. AvaliaÃ§Ã£o dos modelos
    print("\nğŸ”¹ Avaliando o desempenho dos modelos...")
    evaluation.evaluate_models(models, X_test, y_test)

if __name__ == "__main__":
    main()